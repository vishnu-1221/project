from tensorflow import keras

#importing necessary libraries
from tensorflow.keras.layers import Input, Dense, Flatten, Lambda
from tensorflow.keras.models import Model
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt

IMAGE_SIZE=[224,224]
train_path='/content/chest-xray-pneumonia/chest_xray/train'
test_path='/content/chest-xray-pneumonia/chest_xray/test'
vgg=VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)
for layers in vgg.layers:
  layers.trainable=False
folders=glob('/content/chest-xray-pneumonia/chest_xray/train')
x=Flatten()(vgg.output)
prediction=Dense(len(folders), activation='sigmoid')(x)
model=Model(inputs=vgg.input, outputs=prediction)
model.summary()
model.compile(loss="binary_crossentropy", optimizer='adam', metrics=['accuracy'])
from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen=ImageDataGenerator(rescale=1./255,
                                 shear_range=0.2,
                                 zoom_range=0.2,
                                 horizontal_flip=True)
test_datagen=ImageDataGenerator(rescale=1./255)
training_set=train_datagen.flow_from_directory('/content/chest-xray-pneumonia/chest_xray/train',
                                               target_size=(224,224),
                                               batch_size=32,
                                               class_mode='binary')
test_set=test_datagen.flow_from_directory('/content/chest-xray-pneumonia/chest_xray/test',
                                          target_size=(224,224),
                                          batch_size=32,
                                          class_mode='binary')
r = model.fit(
  training_set,
  validation_data=test_set,
  epochs=10,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)